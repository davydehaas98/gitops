# Ansible playbook to install the required packages on the control-plane and worker nodes
- hosts: "control-plane, worker"
  become: yes # Run as root
  environment:
    PROCESSOR_ARCH: $(dpkg --print-architecture)
    CNI_VERSION: 1.4.0
    CONTAINERD_VERSION: 1.7.12
    HELM_VERSION: 3.13.3
    KUBERNETES_VERSION: 1.27.9
    RUNC_VERSION: 1.1.11

  tasks:
    - name: Enable iptables bridged traffic
      shell: |
        cat <<EOF | sudo tee /etc/modules-load.d/k8s.conf
        overlay
        br_netfilter
        EOF
        sudo modprobe overlay && sudo modprobe br_netfilter
    - name: Configure kernel
      shell: |
        cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf
        net.bridge.bridge-nf-call-iptables  = 1
        net.bridge.bridge-nf-call-ip6tables = 1
        net.ipv4.ip_forward                 = 1
        EOF
    - name: Configure inotify
      shell: |
        cat <<EOF | sudo tee /etc/sysctl.d/inotify.conf
        fs.inotify.max_user_instances=8192
        fs.inotify.max_user_watches=524288
        EOF
    - name: Apply changes
      shell: sudo sysctl --system
    - name: Disable swap
      shell: sudo swapoff -a
    - name: Stop swap from mounting
      shell: sudo sed -i -e '/swap/d' /etc/fstab
    - name: Install and update dependencies
      shell: |
        sudo apt-get update
        sudo apt-get install -y apt-transport-https ca-certificates curl gnupg open-iscsi nfs-common
        sudo apt-get autoremove -y
    - name: Install containerd
      shell: |
        curl -fsSLo containerd-${CONTAINERD_VERSION}-linux-${PROCESSOR_ARCH}.tar.gz \
          https://github.com/containerd/containerd/releases/download/v${CONTAINERD_VERSION}/containerd-${CONTAINERD_VERSION}-linux-${PROCESSOR_ARCH}.tar.gz

        sudo tar Cxzvf /usr/local containerd-${CONTAINERD_VERSION}-linux-${PROCESSOR_ARCH}.tar.gz
        sudo rm containerd-${CONTAINERD_VERSION}-linux-${PROCESSOR_ARCH}.tar.gz
    - name: Configure containerd
      shell: |
        sudo mkdir /etc/containerd
        cat <<EOF | sudo tee /etc/containerd/config.toml
        version = 2
        [plugins]
          [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc]
            runtime_type = "io.containerd.runc.v2"
            [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc.options]
              SystemdCgroup = true
        EOF
    - name: Restart and enable containerd
      shell: |
        sudo curl -fsSLo /etc/systemd/system/containerd.service \
          https://raw.githubusercontent.com/containerd/containerd/main/containerd.service
        sudo systemctl daemon-reload
        sudo systemctl enable --now containerd
    - name: Install runc
      shell: |
        curl -fsSLo runc.${PROCESSOR_ARCH} \
          https://github.com/opencontainers/runc/releases/download/v${RUNC_VERSION}/runc.${PROCESSOR_ARCH}

        sudo install -m 755 runc.${PROCESSOR_ARCH} /usr/local/sbin/runc
        rm runc.${PROCESSOR_ARCH}
    - name: Install Container Network Interface (CNI) network plugins
      shell: |
        curl -fsSLo cni-plugins-linux-${PROCESSOR_ARCH}-v${CNI_VERSION}.tgz \
          https://github.com/containernetworking/plugins/releases/download/v${CNI_VERSION}/cni-plugins-linux-${PROCESSOR_ARCH}-v${CNI_VERSION}.tgz

        sudo mkdir -p /opt/cni/bin
        sudo tar Cxzvf /opt/cni/bin cni-plugins-linux-${PROCESSOR_ARCH}-v${CNI_VERSION}.tgz

        sudo rm cni-plugins-linux-${PROCESSOR_ARCH}-v${CNI_VERSION}.tgz
    - name: Add Kubernetes gpg key
      shell: |
        sudo mkdir -m 755 /etc/apt/keyrings
        curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.27/deb/Release.key \
          | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg

        echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.27/deb/ /' \
          | sudo tee /etc/apt/sources.list.d/kubernetes.list
    - name: Install Kubernetes
      shell: |
        sudo apt-get update
        sudo apt-get install -y kubelet=${KUBERNETES_VERSION}-* kubeadm=${KUBERNETES_VERSION}-* kubectl=${KUBERNETES_VERSION}-*
        sudo apt-mark hold kubelet kubeadm kubectl
- hosts: control-plane
  become: yes # Run as root
  tasks:
    - name: Check if the control-plane is already initialized
      stat:
        path: /etc/kubernetes/admin.conf
      register: kubeadm_init
    - name: Initialize the control plane node
      command: sudo kubeadm init --config config.yaml --upload-certs
      when: kubeadm_init.stat.exists == false
    - name: Get the token for joining the worker nodes
      become: yes
      become_user: k8sadmin
      shell: kubeadm token create  --print-join-command
      register: kubernetes_join_command
    - name: Display registered output
      debug:
        var: kubernetes_join_command.stdout_lines
    - name: Install Helm
      shell: |
        curl -fsSLo helm-v${HELM_VERSION}-linux-${PROCESSOR_ARCH}.tar.gz \
          https://get.helm.sh/helm-v${HELM_VERSION}-linux-${PROCESSOR_ARCH}.tar.gz
        sudo tar xzvf helm-v${HELM_VERSION}-linux-${PROCESSOR_ARCH}.tar.gz linux-${PROCESSOR_ARCH}/helm
        sudo mv linux-${PROCESSOR_ARCH}/helm /usr/local/bin/
        sudo rm linux-${PROCESSOR_ARCH} -r
        sudo rm helm-v${HELM_VERSION}-linux-${PROCESSOR_ARCH}.tar.gz
    - name: Create dummy host to store variable for node config
      add_host:
        name: "DUMMY_HOST"
        JOIN_COMMAND: "{{ kubernetes_join_command.stdout_lines[0] }}"
- hosts: worker
  become: yes # Run as root
  tasks:
    - name: Check if the worker node is already joined
      stat:
        path: /etc/kubernetes/kubelet.conf
      register: kubeadm_joined
    - name: Join the worker nodes to the cluster
      command: "{{ hostvars['DUMMY_HOST']['JOIN_COMMAND'] }}"
      become: yes
      when: kubeadm_joined.stat.exists == false
